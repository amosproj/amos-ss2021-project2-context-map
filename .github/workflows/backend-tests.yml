# This file was autogenerated by the KMAP workflow build script
name: Backend unit and e2e tests
on: [ push ]
jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest ]
        node-version: [ 12.x, 14.x ]
    env:
      working-directory: ./backend
      cache-backend: true
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      # kmap.import-action.start-db #
      - run: |
          docker run -d -p 7474:7474 -p 7687:7687 \
          	-v ${GITHUB_WORKSPACE}/backend/docker/mount:/mnt/amos \
            -v ${GITHUB_WORKSPACE}/backend/docker/plugins:/plugins \
          	--env NEO4J_ACCEPT_LICENSE_AGREEMENT=yes \
          	--env DB_PASSWORD=amos \
          	--env DB_PATH=/mnt/amos/dumps/testing-dump.dump \
            --env 'NEO4JLABS_PLUGINS=["apoc", "graph-data-science"]' \
            --env 'NEO4J_dbms_security_procedures_unrestricted=apoc.*,gds.*' \
            --env 'NEO4J_dbms_security_procedures_allowlist=apoc.*,gds.*' \
            --env NEO4J_apoc_import_file_enabled=true \
          	--name neo4j-DB neo4j:enterprise \
          	/mnt/amos/load-dump.sh
      
      - run: npm install -g yarn
      # kmap.import-action.cache #
      # Cypress
      - name: Get cypress version from yarn.lock
        if: ${{ env.cache-frontend == 'true' }}
        id: cypress-version-frontend
        run: echo "::set-output name=version::$(node getCypressVersion)"
        working-directory: ./build
      
      - name: Setup cypress cache (windows)
        id: cypress-cache-windows
        if: ${{ env.cache-frontend == 'true' && matrix.os == 'windows-latest' }}
        uses: actions/cache@v2
        with:
          path: ~/AppData/Local/Cypress/Cache/${{ steps.cypress-version-frontend.outputs.version }}
          key: cypress-cache-windows-${{ matrix.node-version }}-${{ steps.cypress-version-frontend.outputs.version }}
      - name: Setup cypress cache (ubuntu)
        if: ${{ env.cache-frontend == 'true' && matrix.os == 'ubuntu-latest' }}
        id: cypress-cache-ubuntu
        uses: actions/cache@v2
        with:
          path: ~/.cache/Cypress/${{ steps.cypress-version-frontend.outputs.version }}
          key: cypress-cache-ubuntu-${{ matrix.node-version }}-${{ steps.cypress-version-frontend.outputs.version }}
      
      # FE node_modules
      - name: Cache node_modules (frontend)
        if: ${{ env.cache-frontend == 'true' && (steps.cypress-cache-ubuntu.outputs.cache-hit == 'true' || steps.cypress-cache-windows.outputs.cache-hit == 'true') }}
        uses: actions/cache@v2
        with:
          path: frontend/node_modules
          key: ${{ matrix.os }}-${{ matrix.node-version }}-yarn-frontend-${{ hashFiles('frontend/yarn.lock') }}
      
      # BE node_modules
      - name: Cache node_modules (backend)
        if: ${{ env.cache-backend == 'true' }}
        uses: actions/cache@v2
        with:
          path: backend/node_modules
          key: ${{ matrix.os }}-${{ matrix.node-version }}-yarn-backend-${{ hashFiles('frontend/yarn.lock') }}
      
      - run: yarn install --frozen-lockfile --prefer-offline --network-timeout 1000000
        working-directory: ${{ env.working-directory }}
      - run: npx wait-on http://localhost:7474 -t 3240000
      - run: yarn run test:cov
        working-directory: ${{ env.working-directory }}
        env:
          NEO4J_SCHEME: neo4j
          NEO4J_HOST: localhost
          NEO4J_PORT: 7687
          NEO4J_USERNAME: neo4j
          NEO4J_PASSWORD: amos
          NEO4J_DATABASE: neo4j
          CORS_URL: http://localhost:3000
