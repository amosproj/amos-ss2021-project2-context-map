# This file was autogenerated by the KMAP workflow build script
name: Frontend e2e tests
on: [ push ]
jobs:
  e2e-test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ windows-latest, ubuntu-latest ]
        node-version: [ 12.x, 14.x ]
        browser: [ chrome, firefox ]
        include:
          - os: windows-latest
            node-version: 12.x
            browser: edge
          - os: windows-latest
            node-version: 14.x
            browser: edge
    env:
      working-directory: ./frontend
      cache-frontend: true
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - run: npm install -g yarn
      - run: npm install -g wait-on
      - name: npm install -g pm2 # used to start server in parallel
        run: npm install -g pm2

      # kmap.import-action.cache #
      # Cypress
      - name: Get cypress version from yarn.lock
        if: ${{ env.cache-frontend == 'true' }}
        id: cypress-version-frontend
        run: echo "::set-output name=version::$(node .\build\getCypressVersion)"
      
      - name: Setup cypress cache (windows)
        id: cypress-cache-windows
        if: ${{ env.cache-frontend == 'true' && matrix.os == 'windows-latest' }}
        uses: actions/cache@v2
        with:
          path: ~/AppData/Local/Cypress/Cache/${{ steps.cypress-version-frontend.outputs.version }}
          key: cypress-cache-windows-${{ matrix.node-version }}-${{ steps.cypress-version-frontend.outputs.version }}
      - name: Setup cypress cache (ubuntu)
        if: ${{ env.cache-frontend == 'true' && matrix.os == 'ubuntu-latest' }}
        id: cypress-cache-ubuntu
        uses: actions/cache@v2
        with:
          path: ~/.cache/Cypress/${{ steps.cypress-version-frontend.outputs.version }}
          key: cypress-cache-ubuntu-${{ matrix.node-version }}-${{ steps.cypress-version-frontend.outputs.version }}
      
      # FE node_modules
      - name: Cache node_modules (frontend)
        if: ${{ env.cache-frontend == 'true' && (steps.cypress-cache-ubuntu.outputs.cache-hit == 'true' || steps.cypress-cache-windows.outputs.cache-hit == 'true') }}
        uses: actions/cache@v2
        with:
          path: frontend/node_modules
          key: ${{ matrix.os }}-${{ matrix.node-version }}-yarn-frontend-${{ hashFiles('frontend/yarn.lock') }}
      
      # BE node_modules
      - name: Cache node_modules (backend)
        if: ${{ env.cache-backend == 'true' }}
        uses: actions/cache@v2
        with:
          path: backend/node_modules
          key: ${{ matrix.os }}-${{ matrix.node-version }}-yarn-backend-${{ hashFiles('frontend/yarn.lock') }}
      

      - name: Copy .env file
        run: cp .env.example .env
        working-directory: ${{ env.working-directory }}

      - name: Increase file watches
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: echo fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf && sudo sysctl -p

      - run: yarn install --frozen-lockfile --prefer-offline --network-timeout 1000000
        working-directory: ${{ env.working-directory }}

      - name: Start Dev Server (detached)
        run: pm2 start ./build/start-frontend-detached.js

      - name: Wait on Dev Server
        run: wait-on http://localhost:3000
        timeout-minutes: 3

      - name: Cypress run
        run: yarn run cy:run:e2e --browser ${{ matrix.browser }} --headless
        working-directory: ${{ env.working-directory }}

      - name: Print coverage
        run: yarn run coverage:print
      - name: Check coverage
        run: yarn run coverage:check

      - name: Stop Dev Server
        run: pm2 delete all
